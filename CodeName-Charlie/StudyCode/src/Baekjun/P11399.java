
// 인하은행에는 ATM이 1대밖에 없다. 지금 이 ATM앞에 N명의 사람들이 줄을 서있다. 사람은 1번부터 N번까지 번호가 매겨져 있으며, i번 사람이 돈을 인출하는데 걸리는 시간은 Pi분이다.
// 사람들이 줄을 서는 순서에 따라서, 돈을 인출하는데 필요한 시간의 합이 달라지게 된다. 
// 예를 들어, 총 5명이 있고, P1 = 3, P2 = 1, P3 = 4, P4 = 3, P5 = 2 인 경우를 생각해보자.
// [1, 2, 3, 4, 5] 순서로 줄을 선다면, 1번 사람은 3분만에 돈을 뽑을 수 있다.
// 2번 사람은 1번 사람이 돈을 뽑을 때 까지 기다려야 하기 때문에, 3+1 = 4분이 걸리게 된다.
// 3번 사람은 1번, 2번 사람이 돈을 뽑을 때까지 기다려야 하기 때문에, 총 3+1+4 = 8분이 필요하게 된다.
// ...
// 이 경우에 각 사람이 돈을 인출하는데 필요한 시간의 합은 3+4+8+11+13 = 39분이 된다.
// ...
// 줄을 서 있는 사람의 수 N과 각 사람이 돈을 인출하는데 걸리는 시간 Pi가 주어졌을 때, 각 사람이 돈을 인출하는데 필요한 시간의 합의 최솟값을 구하는 프로그램을 작성하시오.

package Baekjun;

// 변수 N을 입력 받자.
// 돈을 인출하는데 필요한 시간을 저장할 배열을 생성하고, 입력 받자.
// 배열을 정렬하고,
// 시간의 총합을 계산해 출력하자.

import java.util.Arrays;
import java.util.Scanner;

public class P11399 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int N = sc.nextInt(); // ATM 앞에 줄을 서있는 사람의 수 N을 입력 받는다.
		
		int[] time = new int[N]; // 돈을 인출하는데 필요한 시간을 저장할 배열 time을 생성한다.
		
		for(int idx = 0; idx < N; idx++) { // for문을 통해 N만큼 반복한다.
			time[idx] = sc.nextInt(); // 배열에 값을 순차적으로 입력 받는다.
		}
		Arrays.sort(time); // 배열을 정렬한다.(인출 시간이 오래걸리는 사람이 먼저 인출할 수록, 전 인원이 기다리는 시간의 합이 작아진다.)

		int sum = 0; // 시간의 합을 나타내는 변수 sum을 선언하고 0으로 초기화한다.
		int jdx = N; // 시간에 곱할 변수 jdx를 선언한다.
		for(int idx = 0; idx < N; idx++) { // for문을 통해 반복 실행한다.
			sum += time[idx] * jdx; // 맨 앞에 서있는 사람의 인출 시간은 모든 사람이 기다려야하기 때문에, 해당 시간에 jdx(N)를 곱해주고,
			jdx--; // jdx를 1씩 감소시킨다.
		}
		System.out.println(sum); // 시간의 합을 출력한다.
	}
}
