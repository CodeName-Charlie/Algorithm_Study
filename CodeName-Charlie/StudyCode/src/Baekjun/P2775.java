
// 평소 반상회에 참석하는 것을 좋아하는 주희는 이번 기회에 부녀회장이 되고 싶어 각 층의 사람들을 불러 모아 반상회를 주최하려고 한다.
// 이 아파트에 거주를 하려면 조건이 있는데,
// “a층의 b호에 살려면 자신의 아래(a-1)층의 1호부터 b호까지 사람들의 수의 합만큼 사람들을 데려와 살아야 한다” 는 계약 조항을 꼭 지키고 들어와야 한다.
// 아파트에 비어있는 집은 없고 모든 거주민들이 이 계약 조건을 지키고 왔다고 가정했을 때, 주어지는 양의 정수 k와 n에 대해 k층에 n호에는 몇 명이 살고 있는지 출력하라.
// 단, 아파트에는 0층부터 있고 각층에는 1호부터 있으며, 0층의 i호에는 i명이 산다.

package Baekjun;

//테스트 케이스 T를 입력 받는다.
//층을 나타내는 변수 k를 입력 받는다.
//호를 나타내는 변수 n을 입력 받는다.
//1층 1호에 사는 사람 수? = 0층 1호에 사는 사람 수(1명)
//1층 2호는? = 0층 1호(1명) + 0층 2호(2명)
//2층 2호는? = 1층 1호(1명) + 1층 2호(1+2명)
//...
//2차원 배열과 반복문을 활용해 풀어보자.

import java.util.Scanner;

public class P2775 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int[][] apartment = new int[15][14]; // 문제 내에서 아파트의 크기가
		// 층은 0층에서 14층으로, 호는 1호에서 14호로 정해졌기 때문에,
		// 아파트를 나타내는 크기 15(층)x14(호)의 이차원 배열 apartment를 생성한다.
		
		for(int col = 0, i = 1; col < 14; col++) { // 0층의 i호에 사는 사람의 수를 먼저 채워준다.
			apartment[0][col] = i; // i호에는 i명이 살기 때문에, 
			// 1호부터 시작하는 아파트의 특성에 맞춰 
			// i를 1로 초기화 하고 순차적으로 배열의 요소값으로 대입한다.
			i++; // 대입 후에는 i를 1씩 증가시키면서 남은 호수의 사람을 채워 나간다.
		}
		
		for(int row = 1; row <= 14; row++) { // 반복문을 통해, 1층부터 14층까지,
			for(int col = 0; col < 14; col++) { // 해당층의 1호부터 14호까지,
				for(int idx = 0; idx < 14; idx++) { // 아래층의 1호부터 14호까지 설정하고,
					apartment[row][col] += apartment[row-1][idx]; // 해당층 해당호에 거주하고 있는 인원수
					// (아래층의 자신의 호와 그 숫자가 같거나 작은 호들의 합.)를 맞춰나간다.
					if(col == idx) { // 호수가 같아지면,
						break; // break를 사용해 반복문을 탈출한다.
					}
				}
			}
		}

		int T = sc.nextInt(); // 테스트 케이스를 나타내는 변수 T를 입력 받는다.
		
		for(int i = 0; i < T; i++) { // 입력 받은 테스트 케이스만큼 for문을 통해 반복한다.
			int k = sc.nextInt(); // 층수를 나타내는 변수 k와
			int n = sc.nextInt(); // 호수를 나타내는 변수 n을 입력받는다.
			
			System.out.println(apartment[k][n-1]); // 미리 완성해놓은 배열을 통해 답을 출력하자.
			// 이 때, 층은 0층부터 시작하기 때문에 그대로 사용해도 괜찮지만, 
			// 호는 1호부터 시작하기 때문에, 0부터 시작하는 배열 인덱스의 특성 상, n-1로 변환하여 사용한다. 
		}
	}
}
