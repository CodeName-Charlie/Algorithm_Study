
// 슈퍼 마리오 앞에 10개의 버섯이 일렬로 놓여져 있다. 이 버섯을 먹으면 점수를 받는다.
// 슈퍼 마리오는 버섯을 처음부터 나온 순서대로 집으려고 한다. 하지만, 모든 버섯을 집을 필요는 없고 중간에 중단할 수 있다.
// 중간에 버섯을 먹는 것을 중단했다면, 그 이후에 나온 버섯은 모두 먹을 수 없다. 따라서 첫 버섯을 먹지 않았다면, 그 이후 버섯도 모두 먹을 수 없다.
// 마리오는 받은 점수의 합을 최대한 100에 가깝게 만들려고 한다.
// 버섯의 점수가 주어졌을 때, 마리오가 받는 점수를 출력하는 프로그램을 작성하시오.

package Baekjun;

// 버섯은 무조건 처음부터 순서대로 먹어야하기 때문에,
// 점수를 순차적으로 더해 저장할 배열을 만든다.
// 배열의 각 요소값을 100과 비교하여,
// 100에 가장 가까운 값을 도출하고, 출력한다.

import java.util.Scanner;

public class P2851 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int[] score = new int[10]; // 버섯을 먹었을 때, 얻을 수 있는 점수를 순차적으로 저장할 크기 10인 배열 score를 생성한다.
		
		for(int i = 0; i < 10; i++) { // for문을 통해,
			int mushroom = sc.nextInt(); // 버섯의 점수를 입력 받고,
			for(int j = i; j < 10; j++) { // for문을 통해,
				score[j] += mushroom; // 버섯의 점수를 배열에 순차적으로 더하고 저장한다.
			}
		}
		int result = 0; // 마리오가 받은 점수를 저장할 변수 result를 0으로 초기화한다.
		int min = 100; // 마리오의 점수를 100과 비교하여, 차이가 가장 적은 값을 도출할 것이기 때문에, 그 값을 100으로 초기화한다. 
		for(int idx = 0; idx < 10; idx++) { // 점수를 저장한 배열을 for문을 통해 순차적으로 확인하면서,
			if(min >= Math.abs(score[idx] - 100)) { // 해당 점수와 100과의 차이를 절대값으로 비교해, min보다 작거나 같다면,
				// (동일한 점수차일 경우 큰 값을 선택하기 위해 같다는 조건을 설정한다.)
				min = Math.abs(score[idx] - 100); // min에 그 차이를 저장하고,
				result = score[idx]; // result에는 해당 값을 저장한다.
			}
		}
		System.out.println(result); // 값을 출력한다.
	}
}
